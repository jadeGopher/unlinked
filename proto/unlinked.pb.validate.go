// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/unlinked.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GetUserProfileInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserProfileInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetProfileId() < 0 {
		return GetUserProfileInfoRequestValidationError{
			field:  "ProfileId",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

// GetUserProfileInfoRequestValidationError is the validation error returned by
// GetUserProfileInfoRequest.Validate if the designated constraints aren't met.
type GetUserProfileInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileInfoRequestValidationError) ErrorName() string {
	return "GetUserProfileInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileInfoRequestValidationError{}

// Validate checks the field values on GetUserProfileInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserProfileInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUserProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileInfoResponseValidationError{
				field:  "UserProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetUserProfileInfoResponseValidationError is the validation error returned
// by GetUserProfileInfoResponse.Validate if the designated constraints aren't met.
type GetUserProfileInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileInfoResponseValidationError) ErrorName() string {
	return "GetUserProfileInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileInfoResponseValidationError{}

// Validate checks the field values on GetUserFriendsListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserFriendsListRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetProfileId() < 0 {
		return GetUserFriendsListRequestValidationError{
			field:  "ProfileId",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetPageNumber() < 0 {
		return GetUserFriendsListRequestValidationError{
			field:  "PageNumber",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetPageSize() <= 0 {
		return GetUserFriendsListRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// GetUserFriendsListRequestValidationError is the validation error returned by
// GetUserFriendsListRequest.Validate if the designated constraints aren't met.
type GetUserFriendsListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserFriendsListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserFriendsListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserFriendsListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserFriendsListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserFriendsListRequestValidationError) ErrorName() string {
	return "GetUserFriendsListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserFriendsListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserFriendsListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserFriendsListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserFriendsListRequestValidationError{}

// Validate checks the field values on GetUserFriendsListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserFriendsListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetFriends() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserFriendsListResponseValidationError{
					field:  fmt.Sprintf("Friends[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalFriendsCount

	return nil
}

// GetUserFriendsListResponseValidationError is the validation error returned
// by GetUserFriendsListResponse.Validate if the designated constraints aren't met.
type GetUserFriendsListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserFriendsListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserFriendsListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserFriendsListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserFriendsListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserFriendsListResponseValidationError) ErrorName() string {
	return "GetUserFriendsListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserFriendsListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserFriendsListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserFriendsListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserFriendsListResponseValidationError{}

// Validate checks the field values on GetUserPhotosRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserPhotosRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetProfileId() < 0 {
		return GetUserPhotosRequestValidationError{
			field:  "ProfileId",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetPageNumber() < 0 {
		return GetUserPhotosRequestValidationError{
			field:  "PageNumber",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetPageSize() <= 0 {
		return GetUserPhotosRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// GetUserPhotosRequestValidationError is the validation error returned by
// GetUserPhotosRequest.Validate if the designated constraints aren't met.
type GetUserPhotosRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserPhotosRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserPhotosRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserPhotosRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserPhotosRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserPhotosRequestValidationError) ErrorName() string {
	return "GetUserPhotosRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserPhotosRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserPhotosRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserPhotosRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserPhotosRequestValidationError{}

// Validate checks the field values on GetUserPhotosResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserPhotosResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPhotos() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserPhotosResponseValidationError{
					field:  fmt.Sprintf("Photos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalPhotosCount

	return nil
}

// GetUserPhotosResponseValidationError is the validation error returned by
// GetUserPhotosResponse.Validate if the designated constraints aren't met.
type GetUserPhotosResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserPhotosResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserPhotosResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserPhotosResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserPhotosResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserPhotosResponseValidationError) ErrorName() string {
	return "GetUserPhotosResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserPhotosResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserPhotosResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserPhotosResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserPhotosResponseValidationError{}

// Validate checks the field values on GetPhotoReactionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPhotoReactionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPhotoId() <= 0 {
		return GetPhotoReactionsRequestValidationError{
			field:  "PhotoId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetReactionId() <= 0 {
		return GetPhotoReactionsRequestValidationError{
			field:  "ReactionId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetPageNumber() < 0 {
		return GetPhotoReactionsRequestValidationError{
			field:  "PageNumber",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetPageSize() <= 0 {
		return GetPhotoReactionsRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// GetPhotoReactionsRequestValidationError is the validation error returned by
// GetPhotoReactionsRequest.Validate if the designated constraints aren't met.
type GetPhotoReactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPhotoReactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPhotoReactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPhotoReactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPhotoReactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPhotoReactionsRequestValidationError) ErrorName() string {
	return "GetPhotoReactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPhotoReactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPhotoReactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPhotoReactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPhotoReactionsRequestValidationError{}

// Validate checks the field values on GetPhotoReactionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPhotoReactionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetUserProfile() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPhotoReactionsResponseValidationError{
					field:  fmt.Sprintf("UserProfile[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ReactionsCount

	return nil
}

// GetPhotoReactionsResponseValidationError is the validation error returned by
// GetPhotoReactionsResponse.Validate if the designated constraints aren't met.
type GetPhotoReactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPhotoReactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPhotoReactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPhotoReactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPhotoReactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPhotoReactionsResponseValidationError) ErrorName() string {
	return "GetPhotoReactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPhotoReactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPhotoReactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPhotoReactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPhotoReactionsResponseValidationError{}

// Validate checks the field values on UserProfile with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserProfile) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Avatar

	// no validation rules for RegisteredAt

	// no validation rules for FollowersCount

	// no validation rules for PhotosCount

	return nil
}

// UserProfileValidationError is the validation error returned by
// UserProfile.Validate if the designated constraints aren't met.
type UserProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserProfileValidationError) ErrorName() string { return "UserProfileValidationError" }

// Error satisfies the builtin error interface
func (e UserProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserProfileValidationError{}

// Validate checks the field values on Photo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Photo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Url

	for idx, item := range m.GetReactionsInfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PhotoValidationError{
					field:  fmt.Sprintf("ReactionsInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreatedAt

	return nil
}

// PhotoValidationError is the validation error returned by Photo.Validate if
// the designated constraints aren't met.
type PhotoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PhotoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PhotoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PhotoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PhotoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PhotoValidationError) ErrorName() string { return "PhotoValidationError" }

// Error satisfies the builtin error interface
func (e PhotoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPhoto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PhotoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PhotoValidationError{}

// Validate checks the field values on ReactionInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ReactionInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Count

	return nil
}

// ReactionInfoValidationError is the validation error returned by
// ReactionInfo.Validate if the designated constraints aren't met.
type ReactionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactionInfoValidationError) ErrorName() string { return "ReactionInfoValidationError" }

// Error satisfies the builtin error interface
func (e ReactionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactionInfoValidationError{}
